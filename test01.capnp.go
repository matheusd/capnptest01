// Code generated by capnpc-go. DO NOT EDIT.

package capnptest01

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type TxType uint16

// TxType_TypeID is the unique identifier for the type TxType.
const TxType_TypeID = 0xa5bb63f73ba1038c

// Values of TxType.
const (
	TxType_c TxType = 0
	TxType_d TxType = 1
)

// String returns the enum's constant name.
func (c TxType) String() string {
	switch c {
	case TxType_c:
		return "c"
	case TxType_d:
		return "d"

	default:
		return ""
	}
}

// TxTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func TxTypeFromString(c string) TxType {
	switch c {
	case "c":
		return TxType_c
	case "d":
		return TxType_d

	default:
		return 0
	}
}

type TxType_List = capnp.EnumList[TxType]

func NewTxType_List(s *capnp.Segment, sz int32) (TxType_List, error) {
	return capnp.NewEnumList[TxType](s, sz)
}

type Transaction capnp.Struct

// Transaction_TypeID is the unique identifier for the type Transaction.
const Transaction_TypeID = 0xd39e9d10251515be

func NewTransaction(s *capnp.Segment) (Transaction, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return Transaction(st), err
}

func NewRootTransaction(s *capnp.Segment) (Transaction, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return Transaction(st), err
}

func ReadRootTransaction(msg *capnp.Message) (Transaction, error) {
	root, err := msg.Root()
	return Transaction(root.Struct()), err
}

func (s Transaction) String() string {
	str, _ := text.Marshal(0xd39e9d10251515be, capnp.Struct(s))
	return str
}

func (s Transaction) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Transaction) DecodeFromPtr(p capnp.Ptr) Transaction {
	return Transaction(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Transaction) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Transaction) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Transaction) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Transaction) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Transaction) Amount() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s Transaction) SetAmount(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

func (s Transaction) Type() TxType {
	return TxType(capnp.Struct(s).Uint16(8))
}

func (s Transaction) SetType(v TxType) {
	capnp.Struct(s).SetUint16(8, uint16(v))
}

func (s Transaction) Description() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Transaction) HasDescription() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Transaction) DescriptionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Transaction) SetDescription(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Transaction) CreatedAtMs() int64 {
	return int64(capnp.Struct(s).Uint64(16))
}

func (s Transaction) SetCreatedAtMs(v int64) {
	capnp.Struct(s).SetUint64(16, uint64(v))
}

// Transaction_List is a list of Transaction.
type Transaction_List = capnp.StructList[Transaction]

// NewTransaction creates a new list of Transaction.
func NewTransaction_List(s *capnp.Segment, sz int32) (Transaction_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return capnp.StructList[Transaction](l), err
}

// Transaction_Future is a wrapper for a Transaction promised by a client call.
type Transaction_Future struct{ *capnp.Future }

func (f Transaction_Future) Struct() (Transaction, error) {
	p, err := f.Future.Ptr()
	return Transaction(p.Struct()), err
}

const schema_f454c62f08bc504b = "x\xdaD\xd0\xbfJ3Q\x10\x05\xf0s\xe6\xee~\x9b" +
	"\x0f\x12\x92k\x12\xf4\x05l\x04\xff\xa4\x12b\xa1\xd6\"" +
	"\xe4BJ\x0b\xd7\xcd\x85,\xe8f\xcd^\xc1\x80\x8f\xe0" +
	"\x0bX((\xf8\x14\x8a\xa5\x85\xad\x0fa-(\x92\xea" +
	"\xcaF4\xd5\x0c\x87\xdf\xcc\xc04\xaev\x82NmQ" +
	" f)\xfc\xe7/\xd5\xed\xd6W\xf2p\x0f]\x13\xbf" +
	"\xd7{\xac\xac?\xf7?\x00\xea\xf7;=\x8d\x00\xfd\xb9" +
	"\x09\xfa\xa7v{\xb9q}\xf3\x0aS\xa3\x9a\xb3\x90\xa5" +
	"\x98\xbe4gM\x93|\xc3\xaaw\xb6p\x1b\x9d\xb5\x84" +
	"q\x9e\xe5\xdd\xfey?\x9a\xe4\xb6G\x9a\x0a\x05\xd0z" +
	"\x01 \xf5\xff\xb2$\x1c\xfcq\xf9\xe1\xe38+\xe2\xc4" +
	"\xa5\xa3\x0c(\x87\x1a*\x00\x02\x02:\xee\x02\xe6@\xd1" +
	"\x0c\x85\x9aA\x8behW\x00s\xa8h\x8e\x85\x94\xd6" +
	"\xecBz\x04\x98\xa1\xa2qB\xad\xa4E\x05\xe8\xd32" +
	"\xcc\x15\xcd\x85p;>\x19\x9de\x8e!\x84!Xw" +
	"\x93\xdc\xb2>\x7f\x05\xc8:\xe8\x07\xb6H\xc6i\xee\x10" +
	"\xa5\xa3\x8cU\x08\xab\xa0O\xc66vv\xb0\x8b\xc8\xed" +
	"\x17\xbf+\xbe\x03\x00\x00\xff\xff\x0e\x0dOG"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_f454c62f08bc504b,
		Nodes: []uint64{
			0xa5bb63f73ba1038c,
			0xd39e9d10251515be,
		},
		Compressed: true,
	})
}
